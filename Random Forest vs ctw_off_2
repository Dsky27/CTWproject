{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Téléchargement des données...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  10 of 10 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Colonnes disponibles après téléchargement : MultiIndex([( 'Close',       'EEM'),\n",
      "            ( 'Close',        'VT'),\n",
      "            ( 'Close',     '^FTSE'),\n",
      "            ( 'Close',    '^GDAXI'),\n",
      "            ( 'Close',     '^GSPC'),\n",
      "            ( 'Close',      '^HSI'),\n",
      "            ( 'Close',     '^N225'),\n",
      "            ( 'Close',      '^RUT'),\n",
      "            ( 'Close', '^STOXX50E'),\n",
      "            ( 'Close',      '^VIX'),\n",
      "            (  'High',       'EEM'),\n",
      "            (  'High',        'VT'),\n",
      "            (  'High',     '^FTSE'),\n",
      "            (  'High',    '^GDAXI'),\n",
      "            (  'High',     '^GSPC'),\n",
      "            (  'High',      '^HSI'),\n",
      "            (  'High',     '^N225'),\n",
      "            (  'High',      '^RUT'),\n",
      "            (  'High', '^STOXX50E'),\n",
      "            (  'High',      '^VIX'),\n",
      "            (   'Low',       'EEM'),\n",
      "            (   'Low',        'VT'),\n",
      "            (   'Low',     '^FTSE'),\n",
      "            (   'Low',    '^GDAXI'),\n",
      "            (   'Low',     '^GSPC'),\n",
      "            (   'Low',      '^HSI'),\n",
      "            (   'Low',     '^N225'),\n",
      "            (   'Low',      '^RUT'),\n",
      "            (   'Low', '^STOXX50E'),\n",
      "            (   'Low',      '^VIX'),\n",
      "            (  'Open',       'EEM'),\n",
      "            (  'Open',        'VT'),\n",
      "            (  'Open',     '^FTSE'),\n",
      "            (  'Open',    '^GDAXI'),\n",
      "            (  'Open',     '^GSPC'),\n",
      "            (  'Open',      '^HSI'),\n",
      "            (  'Open',     '^N225'),\n",
      "            (  'Open',      '^RUT'),\n",
      "            (  'Open', '^STOXX50E'),\n",
      "            (  'Open',      '^VIX'),\n",
      "            ('Volume',       'EEM'),\n",
      "            ('Volume',        'VT'),\n",
      "            ('Volume',     '^FTSE'),\n",
      "            ('Volume',    '^GDAXI'),\n",
      "            ('Volume',     '^GSPC'),\n",
      "            ('Volume',      '^HSI'),\n",
      "            ('Volume',     '^N225'),\n",
      "            ('Volume',      '^RUT'),\n",
      "            ('Volume', '^STOXX50E'),\n",
      "            ('Volume',      '^VIX')],\n",
      "           names=['Price', 'Ticker'])\n",
      "Colonnes après renommage : Index(['iShares MSCI Emerging Markets', 'Vanguard Total World Stock ETF',\n",
      "       'FTSE100', 'DAX', 'S&P500', 'Hang Seng', 'Nikkei225', 'Russell 2000',\n",
      "       'STOXX50', 'VIX Index'],\n",
      "      dtype='object', name='Ticker')\n",
      "Taille totale : 1762 observations\n",
      "Train : 1502 observations | Test : 260 observations\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Ticker</th>\n",
       "      <th>iShares MSCI Emerging Markets</th>\n",
       "      <th>Vanguard Total World Stock ETF</th>\n",
       "      <th>FTSE100</th>\n",
       "      <th>DAX</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Hang Seng</th>\n",
       "      <th>Nikkei225</th>\n",
       "      <th>Russell 2000</th>\n",
       "      <th>STOXX50</th>\n",
       "      <th>VIX Index</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>40.948372</td>\n",
       "      <td>64.229416</td>\n",
       "      <td>7648.100098</td>\n",
       "      <td>12871.389648</td>\n",
       "      <td>2695.810059</td>\n",
       "      <td>30515.310547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1550.010010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>41.340714</td>\n",
       "      <td>64.666679</td>\n",
       "      <td>7671.100098</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>2713.060059</td>\n",
       "      <td>30560.949219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.579956</td>\n",
       "      <td>3509.879883</td>\n",
       "      <td>9.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>41.545406</td>\n",
       "      <td>65.052536</td>\n",
       "      <td>7695.899902</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>2723.989990</td>\n",
       "      <td>30736.480469</td>\n",
       "      <td>23506.330078</td>\n",
       "      <td>1555.719971</td>\n",
       "      <td>3568.879883</td>\n",
       "      <td>9.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>41.903637</td>\n",
       "      <td>65.429787</td>\n",
       "      <td>7724.200195</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>2743.149902</td>\n",
       "      <td>30814.640625</td>\n",
       "      <td>23714.529297</td>\n",
       "      <td>1560.010010</td>\n",
       "      <td>3607.629883</td>\n",
       "      <td>9.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>41.903637</td>\n",
       "      <td>65.498375</td>\n",
       "      <td>7696.500000</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>2747.709961</td>\n",
       "      <td>30899.529297</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1561.810059</td>\n",
       "      <td>3616.449951</td>\n",
       "      <td>9.52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Ticker      iShares MSCI Emerging Markets  Vanguard Total World Stock ETF  \\\n",
       "Date                                                                        \n",
       "2018-01-02                      40.948372                       64.229416   \n",
       "2018-01-03                      41.340714                       64.666679   \n",
       "2018-01-04                      41.545406                       65.052536   \n",
       "2018-01-05                      41.903637                       65.429787   \n",
       "2018-01-08                      41.903637                       65.498375   \n",
       "\n",
       "Ticker          FTSE100           DAX       S&P500     Hang Seng  \\\n",
       "Date                                                               \n",
       "2018-01-02  7648.100098  12871.389648  2695.810059  30515.310547   \n",
       "2018-01-03  7671.100098  12978.209961  2713.060059  30560.949219   \n",
       "2018-01-04  7695.899902  13167.889648  2723.989990  30736.480469   \n",
       "2018-01-05  7724.200195  13319.639648  2743.149902  30814.640625   \n",
       "2018-01-08  7696.500000  13367.780273  2747.709961  30899.529297   \n",
       "\n",
       "Ticker         Nikkei225  Russell 2000      STOXX50  VIX Index  \n",
       "Date                                                            \n",
       "2018-01-02           NaN   1550.010010          NaN       9.77  \n",
       "2018-01-03           NaN   1552.579956  3509.879883       9.15  \n",
       "2018-01-04  23506.330078   1555.719971  3568.879883       9.22  \n",
       "2018-01-05  23714.529297   1560.010010  3607.629883       9.22  \n",
       "2018-01-08           NaN   1561.810059  3616.449951       9.52  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from ctw2 import CTW\n",
    "import numpy as np  \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "# Définition des périodes d'entraînement et de test\n",
    "train_start = \"2018-01-01\"  # Commencer plus tôt pour avoir plus de données\n",
    "train_end = \"2023-10-09\"\n",
    "test_start = \"2023-10-10\"\n",
    "test_end = \"2024-10-09\"\n",
    "\n",
    "\n",
    "# Définition des tickers en fonction de l'étude\n",
    "tickers = {\n",
    "    \"S&P500\": \"^GSPC\",\n",
    "    \"STOXX50\": \"^STOXX50E\",\n",
    "    \"Hang Seng\": \"^HSI\",\n",
    "    \"Nikkei225\": \"^N225\",\n",
    "    \"FTSE100\": \"^FTSE\",\n",
    "    \"DAX\": \"^GDAXI\",\n",
    "    \"Russell 2000\": \"^RUT\",\n",
    "    \"iShares MSCI Emerging Markets\": \"EEM\",\n",
    "    \"Vanguard Total World Stock ETF\": \"VT\",\n",
    "    \"VIX Index\": \"^VIX\"\n",
    "}\n",
    "\n",
    "# Téléchargement des données\n",
    "print(\"Téléchargement des données...\")\n",
    "data = yf.download(list(tickers.values()), start=train_start, end=test_end)\n",
    "\n",
    "# Vérification que les données ont bien été récupérées\n",
    "print(\"Colonnes disponibles après téléchargement :\", data.columns)\n",
    "\n",
    "# Vérifier si \"Adj Close\" existe\n",
    "if \"Close\" in data:\n",
    "    data = data[\"Close\"] \n",
    "else:\n",
    "    raise KeyError(\"La colonne 'Adj Close' est absente. Vérifie les données téléchargées.\")\n",
    "\n",
    "# Renommage des colonnes pour plus de lisibilité\n",
    "columns_map = {\n",
    "    \"^GSPC\": \"S&P500\",\n",
    "    \"^STOXX50E\": \"STOXX50\",\n",
    "    \"^HSI\": \"Hang Seng\",\n",
    "    \"^N225\": \"Nikkei225\",\n",
    "    \"^FTSE\": \"FTSE100\",\n",
    "    \"^GDAXI\": \"DAX\",\n",
    "    \"^RUT\": \"Russell 2000\",\n",
    "    \"EEM\": \"iShares MSCI Emerging Markets\",\n",
    "    \"VT\": \"Vanguard Total World Stock ETF\",\n",
    "    \"^VIX\": \"VIX Index\"\n",
    "}\n",
    "data.rename(columns=columns_map, inplace=True)\n",
    "\n",
    "# Vérification après renommage\n",
    "print(\"Colonnes après renommage :\", data.columns)\n",
    "\n",
    "# Séparation en train/test\n",
    "train_data = data.loc[train_start:train_end]\n",
    "test_data = data.loc[test_start:test_end]\n",
    "\n",
    "# Vérification finale\n",
    "print(f\"Taille totale : {len(data)} observations\")\n",
    "print(f\"Train : {len(train_data)} observations | Test : {len(test_data)} observations\")\n",
    "\n",
    "# Affichage des premières lignes\n",
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Step 1 : Récupération des indices boursiers & ETFs\n",
    "Step 2: Calcul des Indicateurs Techniques\n",
    "step 3: Ajout des Devises et Taux d’Intérêt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Ticker</th>\n",
       "      <th>iShares MSCI Emerging Markets</th>\n",
       "      <th>Vanguard Total World Stock ETF</th>\n",
       "      <th>FTSE100</th>\n",
       "      <th>DAX</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Hang Seng</th>\n",
       "      <th>Nikkei225</th>\n",
       "      <th>Russell 2000</th>\n",
       "      <th>STOXX50</th>\n",
       "      <th>VIX Index</th>\n",
       "      <th>RSI</th>\n",
       "      <th>MACD</th>\n",
       "      <th>MACD_Signal</th>\n",
       "      <th>Bollinger_High</th>\n",
       "      <th>Bollinger_Low</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>40.948368</td>\n",
       "      <td>64.439194</td>\n",
       "      <td>7648.100098</td>\n",
       "      <td>12871.389648</td>\n",
       "      <td>2695.810059</td>\n",
       "      <td>30515.310547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1550.010010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>41.340710</td>\n",
       "      <td>64.877899</td>\n",
       "      <td>7671.100098</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>2713.060059</td>\n",
       "      <td>30560.949219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.579956</td>\n",
       "      <td>3509.879883</td>\n",
       "      <td>9.15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.376068</td>\n",
       "      <td>0.275214</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>41.545414</td>\n",
       "      <td>65.264999</td>\n",
       "      <td>7695.899902</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>2723.989990</td>\n",
       "      <td>30736.480469</td>\n",
       "      <td>23506.330078</td>\n",
       "      <td>1555.719971</td>\n",
       "      <td>3568.879883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.310406</td>\n",
       "      <td>0.882252</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.643501</td>\n",
       "      <td>7724.200195</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>2743.149902</td>\n",
       "      <td>30814.640625</td>\n",
       "      <td>23714.529297</td>\n",
       "      <td>1560.010010</td>\n",
       "      <td>3607.629883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.316614</td>\n",
       "      <td>1.969125</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.712303</td>\n",
       "      <td>7696.500000</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>2747.709961</td>\n",
       "      <td>30899.529297</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1561.810059</td>\n",
       "      <td>3616.449951</td>\n",
       "      <td>9.52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.963686</td>\n",
       "      <td>3.368037</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Ticker      iShares MSCI Emerging Markets  Vanguard Total World Stock ETF  \\\n",
       "Date                                                                        \n",
       "2018-01-02                      40.948368                       64.439194   \n",
       "2018-01-03                      41.340710                       64.877899   \n",
       "2018-01-04                      41.545414                       65.264999   \n",
       "2018-01-05                      41.903641                       65.643501   \n",
       "2018-01-08                      41.903641                       65.712303   \n",
       "\n",
       "Ticker          FTSE100           DAX       S&P500     Hang Seng  \\\n",
       "Date                                                               \n",
       "2018-01-02  7648.100098  12871.389648  2695.810059  30515.310547   \n",
       "2018-01-03  7671.100098  12978.209961  2713.060059  30560.949219   \n",
       "2018-01-04  7695.899902  13167.889648  2723.989990  30736.480469   \n",
       "2018-01-05  7724.200195  13319.639648  2743.149902  30814.640625   \n",
       "2018-01-08  7696.500000  13367.780273  2747.709961  30899.529297   \n",
       "\n",
       "Ticker         Nikkei225  Russell 2000      STOXX50  VIX Index  RSI      MACD  \\\n",
       "Date                                                                            \n",
       "2018-01-02           NaN   1550.010010          NaN       9.77  NaN  0.000000   \n",
       "2018-01-03           NaN   1552.579956  3509.879883       9.15  NaN  1.376068   \n",
       "2018-01-04  23506.330078   1555.719971  3568.879883       9.22  NaN  3.310406   \n",
       "2018-01-05  23714.529297   1560.010010  3607.629883       9.22  NaN  6.316614   \n",
       "2018-01-08           NaN   1561.810059  3616.449951       9.52  NaN  8.963686   \n",
       "\n",
       "Ticker      MACD_Signal  Bollinger_High  Bollinger_Low  \n",
       "Date                                                    \n",
       "2018-01-02     0.000000             NaN            NaN  \n",
       "2018-01-03     0.275214             NaN            NaN  \n",
       "2018-01-04     0.882252             NaN            NaN  \n",
       "2018-01-05     1.969125             NaN            NaN  \n",
       "2018-01-08     3.368037             NaN            NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def calculate_technical_indicators(df, window_rsi=14, window_macd_short=12, window_macd_long=26, window_signal=9, window_boll=20):\n",
    "    \"\"\"Ajoute RSI, MACD et Bollinger Bands au dataset\"\"\"\n",
    "    df = df.copy()\n",
    "    \n",
    "    # RSI (Relative Strength Index)\n",
    "    delta = df[\"S&P500\"].diff()\n",
    "    gain = (delta.where(delta > 0, 0)).rolling(window=window_rsi).mean()\n",
    "    loss = (-delta.where(delta < 0, 0)).rolling(window=window_rsi).mean()\n",
    "    rs = gain / loss\n",
    "    df[\"RSI\"] = 100 - (100 / (1 + rs))\n",
    "\n",
    "    # MACD (Moving Average Convergence Divergence)\n",
    "    ema_short = df[\"S&P500\"].ewm(span=window_macd_short, adjust=False).mean()\n",
    "    ema_long = df[\"S&P500\"].ewm(span=window_macd_long, adjust=False).mean()\n",
    "    df[\"MACD\"] = ema_short - ema_long\n",
    "    df[\"MACD_Signal\"] = df[\"MACD\"].ewm(span=window_signal, adjust=False).mean()\n",
    "\n",
    "    # Bollinger Bands\n",
    "    rolling_mean = df[\"S&P500\"].rolling(window=window_boll).mean()\n",
    "    rolling_std = df[\"S&P500\"].rolling(window=window_boll).std()\n",
    "    df[\"Bollinger_High\"] = rolling_mean + (2 * rolling_std)\n",
    "    df[\"Bollinger_Low\"] = rolling_mean - (2 * rolling_std)\n",
    "\n",
    "    return df\n",
    "\n",
    "# Calcul des indicateurs techniques pour train et test\n",
    "train_data = calculate_technical_indicators(train_data)\n",
    "test_data = calculate_technical_indicators(test_data)\n",
    "\n",
    "# Vérification\n",
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Téléchargement des taux de change...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  4 of 4 completed\n",
      "[*********************100%***********************]  3 of 3 completed\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Téléchargement des taux d'intérêt...\n",
      "Colonnes des taux de change : Index(['EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CNY'], dtype='object')\n",
      "Colonnes des taux d'intérêt : Index(['US 10Y Yield', 'US 2Y Yield', 'Germany 10Y Yield'], dtype='object')\n",
      "Colonnes après fusion : Index(['iShares MSCI Emerging Markets', 'Vanguard Total World Stock ETF',\n",
      "       'FTSE100', 'DAX', 'S&P500', 'Hang Seng', 'Nikkei225', 'Russell 2000',\n",
      "       'STOXX50', 'VIX Index', 'RSI', 'MACD', 'MACD_Signal', 'Bollinger_High',\n",
      "       'Bollinger_Low', 'EUR/USD', 'GBP/USD', 'USD/JPY', 'USD/CNY',\n",
      "       'US 10Y Yield', 'US 2Y Yield', 'Germany 10Y Yield'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iShares MSCI Emerging Markets</th>\n",
       "      <th>Vanguard Total World Stock ETF</th>\n",
       "      <th>FTSE100</th>\n",
       "      <th>DAX</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Hang Seng</th>\n",
       "      <th>Nikkei225</th>\n",
       "      <th>Russell 2000</th>\n",
       "      <th>STOXX50</th>\n",
       "      <th>VIX Index</th>\n",
       "      <th>...</th>\n",
       "      <th>MACD_Signal</th>\n",
       "      <th>Bollinger_High</th>\n",
       "      <th>Bollinger_Low</th>\n",
       "      <th>EUR/USD</th>\n",
       "      <th>GBP/USD</th>\n",
       "      <th>USD/JPY</th>\n",
       "      <th>USD/CNY</th>\n",
       "      <th>US 10Y Yield</th>\n",
       "      <th>US 2Y Yield</th>\n",
       "      <th>Germany 10Y Yield</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>40.948368</td>\n",
       "      <td>64.439194</td>\n",
       "      <td>7648.100098</td>\n",
       "      <td>12871.389648</td>\n",
       "      <td>2695.810059</td>\n",
       "      <td>30515.310547</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1550.010010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.77</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.5058</td>\n",
       "      <td>1.201158</td>\n",
       "      <td>1.351132</td>\n",
       "      <td>112.769997</td>\n",
       "      <td>12871.389648</td>\n",
       "      <td>1.378</td>\n",
       "      <td>2.465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>41.340710</td>\n",
       "      <td>64.877899</td>\n",
       "      <td>7671.100098</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>2713.060059</td>\n",
       "      <td>30560.949219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.579956</td>\n",
       "      <td>3509.879883</td>\n",
       "      <td>9.15</td>\n",
       "      <td>...</td>\n",
       "      <td>0.275214</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.4940</td>\n",
       "      <td>1.206345</td>\n",
       "      <td>1.359619</td>\n",
       "      <td>112.244003</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>41.545414</td>\n",
       "      <td>65.264999</td>\n",
       "      <td>7695.899902</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>2723.989990</td>\n",
       "      <td>30736.480469</td>\n",
       "      <td>23506.330078</td>\n",
       "      <td>1555.719971</td>\n",
       "      <td>3568.879883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>...</td>\n",
       "      <td>0.882252</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.5031</td>\n",
       "      <td>1.201043</td>\n",
       "      <td>1.351132</td>\n",
       "      <td>112.607002</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.643501</td>\n",
       "      <td>7724.200195</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>2743.149902</td>\n",
       "      <td>30814.640625</td>\n",
       "      <td>23714.529297</td>\n",
       "      <td>1560.010010</td>\n",
       "      <td>3607.629883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>...</td>\n",
       "      <td>1.969125</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.4933</td>\n",
       "      <td>1.206884</td>\n",
       "      <td>1.355289</td>\n",
       "      <td>112.782997</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.712303</td>\n",
       "      <td>7696.500000</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>2747.709961</td>\n",
       "      <td>30899.529297</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1561.810059</td>\n",
       "      <td>3616.449951</td>\n",
       "      <td>9.52</td>\n",
       "      <td>...</td>\n",
       "      <td>3.368037</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.4875</td>\n",
       "      <td>1.203746</td>\n",
       "      <td>1.357589</td>\n",
       "      <td>113.153999</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>1.380</td>\n",
       "      <td>2.480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            iShares MSCI Emerging Markets  Vanguard Total World Stock ETF  \\\n",
       "Date                                                                        \n",
       "2018-01-02                      40.948368                       64.439194   \n",
       "2018-01-03                      41.340710                       64.877899   \n",
       "2018-01-04                      41.545414                       65.264999   \n",
       "2018-01-05                      41.903641                       65.643501   \n",
       "2018-01-08                      41.903641                       65.712303   \n",
       "\n",
       "                FTSE100           DAX       S&P500     Hang Seng  \\\n",
       "Date                                                               \n",
       "2018-01-02  7648.100098  12871.389648  2695.810059  30515.310547   \n",
       "2018-01-03  7671.100098  12978.209961  2713.060059  30560.949219   \n",
       "2018-01-04  7695.899902  13167.889648  2723.989990  30736.480469   \n",
       "2018-01-05  7724.200195  13319.639648  2743.149902  30814.640625   \n",
       "2018-01-08  7696.500000  13367.780273  2747.709961  30899.529297   \n",
       "\n",
       "               Nikkei225  Russell 2000      STOXX50  VIX Index  ...  \\\n",
       "Date                                                            ...   \n",
       "2018-01-02           NaN   1550.010010          NaN       9.77  ...   \n",
       "2018-01-03           NaN   1552.579956  3509.879883       9.15  ...   \n",
       "2018-01-04  23506.330078   1555.719971  3568.879883       9.22  ...   \n",
       "2018-01-05  23714.529297   1560.010010  3607.629883       9.22  ...   \n",
       "2018-01-08           NaN   1561.810059  3616.449951       9.52  ...   \n",
       "\n",
       "            MACD_Signal  Bollinger_High  Bollinger_Low  EUR/USD   GBP/USD  \\\n",
       "Date                                                                        \n",
       "2018-01-02     0.000000             NaN            NaN   6.5058  1.201158   \n",
       "2018-01-03     0.275214             NaN            NaN   6.4940  1.206345   \n",
       "2018-01-04     0.882252             NaN            NaN   6.5031  1.201043   \n",
       "2018-01-05     1.969125             NaN            NaN   6.4933  1.206884   \n",
       "2018-01-08     3.368037             NaN            NaN   6.4875  1.203746   \n",
       "\n",
       "             USD/JPY     USD/CNY  US 10Y Yield  US 2Y Yield  Germany 10Y Yield  \n",
       "Date                                                                            \n",
       "2018-01-02  1.351132  112.769997  12871.389648        1.378              2.465  \n",
       "2018-01-03  1.359619  112.244003  12978.209961        1.370              2.447  \n",
       "2018-01-04  1.351132  112.607002  13167.889648        1.370              2.453  \n",
       "2018-01-05  1.355289  112.782997  13319.639648        1.370              2.476  \n",
       "2018-01-08  1.357589  113.153999  13367.780273        1.380              2.480  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Définition des tickers pour les devises et taux d'intérêt\n",
    "currency_tickers = {\n",
    "    \"EUR/USD\": \"EURUSD=X\",\n",
    "    \"GBP/USD\": \"GBPUSD=X\",\n",
    "    \"USD/JPY\": \"JPY=X\",\n",
    "    \"USD/CNY\": \"CNY=X\"\n",
    "}\n",
    "\n",
    "interest_rate_tickers = {\n",
    "    \"US 10Y Yield\": \"^TNX\",\n",
    "    \"US 2Y Yield\": \"^IRX\",\n",
    "    \"Germany 10Y Yield\": \"^GDAXI\"\n",
    "}\n",
    "\n",
    "# Téléchargement des devises\n",
    "print(\"Téléchargement des taux de change...\")\n",
    "currency_data = yf.download(list(currency_tickers.values()), start=train_start, end=test_end)[\"Close\"]\n",
    "currency_data.columns = currency_tickers.keys()\n",
    "\n",
    "# Téléchargement des taux d'intérêt\n",
    "print(\"Téléchargement des taux d'intérêt...\")\n",
    "rates_data = yf.download(list(interest_rate_tickers.values()), start=train_start, end=test_end)[\"Close\"]\n",
    "rates_data.columns = interest_rate_tickers.keys()\n",
    "\n",
    "# Vérification des données téléchargées\n",
    "print(\"Colonnes des taux de change :\", currency_data.columns)\n",
    "print(\"Colonnes des taux d'intérêt :\", rates_data.columns)\n",
    "\n",
    "# Fusion des données avec les datasets train et test en ajoutant des suffixes pour éviter les conflits\n",
    "train_data = train_data.join(currency_data.loc[train_start:train_end], rsuffix=\"_currency\")\n",
    "test_data = test_data.join(currency_data.loc[test_start:test_end], rsuffix=\"_currency\")\n",
    "\n",
    "train_data = train_data.join(rates_data.loc[train_start:train_end], rsuffix=\"_rates\")\n",
    "test_data = test_data.join(rates_data.loc[test_start:test_end], rsuffix=\"_rates\")\n",
    "\n",
    "# Vérification après fusion\n",
    "print(\"Colonnes après fusion :\", train_data.columns)\n",
    "\n",
    "# Affichage des premières lignes pour vérification\n",
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finalisation du dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de NaN AVANT correction :\n",
      "Train : 2559 | Test : 494\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Jacques\\AppData\\Local\\Temp\\ipykernel_22524\\3093531559.py:6: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  train_data = train_data.fillna(method=\"ffill\")\n",
      "C:\\Users\\Jacques\\AppData\\Local\\Temp\\ipykernel_22524\\3093531559.py:7: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  test_data = test_data.fillna(method=\"ffill\")\n",
      "C:\\Users\\Jacques\\AppData\\Local\\Temp\\ipykernel_22524\\3093531559.py:14: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  train_data = train_data.fillna(method=\"bfill\")\n",
      "C:\\Users\\Jacques\\AppData\\Local\\Temp\\ipykernel_22524\\3093531559.py:15: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  test_data = test_data.fillna(method=\"bfill\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de NaN APRÈS correction : 74 | Test : 51\n",
      "Correction supplémentaire avec backward fill appliquée.\n",
      "Répartition des classes dans Train :\n",
      "Class\n",
      "Strong Positive      447\n",
      "Slightly Positive    381\n",
      "Strong Negative      368\n",
      "Slightly Negative    305\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Répartition des classes dans Test :\n",
      "Class\n",
      "Slightly Positive    80\n",
      "Strong Positive      75\n",
      "Slightly Negative    58\n",
      "Strong Negative      46\n",
      "Name: count, dtype: int64\n",
      "\n",
      "✅ Train et Test datasets prêts et sauvegardés !\n",
      "Train : 1501 observations | Test : 259 observations\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iShares MSCI Emerging Markets</th>\n",
       "      <th>Vanguard Total World Stock ETF</th>\n",
       "      <th>FTSE100</th>\n",
       "      <th>DAX</th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>Hang Seng</th>\n",
       "      <th>Nikkei225</th>\n",
       "      <th>Russell 2000</th>\n",
       "      <th>STOXX50</th>\n",
       "      <th>VIX Index</th>\n",
       "      <th>...</th>\n",
       "      <th>Bollinger_High</th>\n",
       "      <th>Bollinger_Low</th>\n",
       "      <th>EUR/USD</th>\n",
       "      <th>GBP/USD</th>\n",
       "      <th>USD/JPY</th>\n",
       "      <th>USD/CNY</th>\n",
       "      <th>US 10Y Yield</th>\n",
       "      <th>US 2Y Yield</th>\n",
       "      <th>Germany 10Y Yield</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>41.340710</td>\n",
       "      <td>64.877899</td>\n",
       "      <td>7671.100098</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>2713.060059</td>\n",
       "      <td>30560.949219</td>\n",
       "      <td>23506.330078</td>\n",
       "      <td>1552.579956</td>\n",
       "      <td>3509.879883</td>\n",
       "      <td>9.15</td>\n",
       "      <td>...</td>\n",
       "      <td>2944.65993</td>\n",
       "      <td>2592.864045</td>\n",
       "      <td>6.4940</td>\n",
       "      <td>1.206345</td>\n",
       "      <td>1.359619</td>\n",
       "      <td>112.244003</td>\n",
       "      <td>12978.209961</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.447</td>\n",
       "      <td>Strong Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>41.545414</td>\n",
       "      <td>65.264999</td>\n",
       "      <td>7695.899902</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>2723.989990</td>\n",
       "      <td>30736.480469</td>\n",
       "      <td>23506.330078</td>\n",
       "      <td>1555.719971</td>\n",
       "      <td>3568.879883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>...</td>\n",
       "      <td>2944.65993</td>\n",
       "      <td>2592.864045</td>\n",
       "      <td>6.5031</td>\n",
       "      <td>1.201043</td>\n",
       "      <td>1.351132</td>\n",
       "      <td>112.607002</td>\n",
       "      <td>13167.889648</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.453</td>\n",
       "      <td>Slightly Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.643501</td>\n",
       "      <td>7724.200195</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>2743.149902</td>\n",
       "      <td>30814.640625</td>\n",
       "      <td>23714.529297</td>\n",
       "      <td>1560.010010</td>\n",
       "      <td>3607.629883</td>\n",
       "      <td>9.22</td>\n",
       "      <td>...</td>\n",
       "      <td>2944.65993</td>\n",
       "      <td>2592.864045</td>\n",
       "      <td>6.4933</td>\n",
       "      <td>1.206884</td>\n",
       "      <td>1.355289</td>\n",
       "      <td>112.782997</td>\n",
       "      <td>13319.639648</td>\n",
       "      <td>1.370</td>\n",
       "      <td>2.476</td>\n",
       "      <td>Strong Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-08</th>\n",
       "      <td>41.903641</td>\n",
       "      <td>65.712303</td>\n",
       "      <td>7696.500000</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>2747.709961</td>\n",
       "      <td>30899.529297</td>\n",
       "      <td>23714.529297</td>\n",
       "      <td>1561.810059</td>\n",
       "      <td>3616.449951</td>\n",
       "      <td>9.52</td>\n",
       "      <td>...</td>\n",
       "      <td>2944.65993</td>\n",
       "      <td>2592.864045</td>\n",
       "      <td>6.4875</td>\n",
       "      <td>1.203746</td>\n",
       "      <td>1.357589</td>\n",
       "      <td>113.153999</td>\n",
       "      <td>13367.780273</td>\n",
       "      <td>1.380</td>\n",
       "      <td>2.480</td>\n",
       "      <td>Slightly Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-09</th>\n",
       "      <td>41.835396</td>\n",
       "      <td>65.824135</td>\n",
       "      <td>7731.000000</td>\n",
       "      <td>13385.589844</td>\n",
       "      <td>2751.290039</td>\n",
       "      <td>31011.410156</td>\n",
       "      <td>23849.990234</td>\n",
       "      <td>1560.099976</td>\n",
       "      <td>3622.870117</td>\n",
       "      <td>10.08</td>\n",
       "      <td>...</td>\n",
       "      <td>2944.65993</td>\n",
       "      <td>2592.864045</td>\n",
       "      <td>6.4976</td>\n",
       "      <td>1.197046</td>\n",
       "      <td>1.357128</td>\n",
       "      <td>113.140999</td>\n",
       "      <td>13385.589844</td>\n",
       "      <td>1.415</td>\n",
       "      <td>2.546</td>\n",
       "      <td>Slightly Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            iShares MSCI Emerging Markets  Vanguard Total World Stock ETF  \\\n",
       "Date                                                                        \n",
       "2018-01-03                      41.340710                       64.877899   \n",
       "2018-01-04                      41.545414                       65.264999   \n",
       "2018-01-05                      41.903641                       65.643501   \n",
       "2018-01-08                      41.903641                       65.712303   \n",
       "2018-01-09                      41.835396                       65.824135   \n",
       "\n",
       "                FTSE100           DAX       S&P500     Hang Seng  \\\n",
       "Date                                                               \n",
       "2018-01-03  7671.100098  12978.209961  2713.060059  30560.949219   \n",
       "2018-01-04  7695.899902  13167.889648  2723.989990  30736.480469   \n",
       "2018-01-05  7724.200195  13319.639648  2743.149902  30814.640625   \n",
       "2018-01-08  7696.500000  13367.780273  2747.709961  30899.529297   \n",
       "2018-01-09  7731.000000  13385.589844  2751.290039  31011.410156   \n",
       "\n",
       "               Nikkei225  Russell 2000      STOXX50  VIX Index  ...  \\\n",
       "Date                                                            ...   \n",
       "2018-01-03  23506.330078   1552.579956  3509.879883       9.15  ...   \n",
       "2018-01-04  23506.330078   1555.719971  3568.879883       9.22  ...   \n",
       "2018-01-05  23714.529297   1560.010010  3607.629883       9.22  ...   \n",
       "2018-01-08  23714.529297   1561.810059  3616.449951       9.52  ...   \n",
       "2018-01-09  23849.990234   1560.099976  3622.870117      10.08  ...   \n",
       "\n",
       "            Bollinger_High  Bollinger_Low  EUR/USD   GBP/USD   USD/JPY  \\\n",
       "Date                                                                     \n",
       "2018-01-03      2944.65993    2592.864045   6.4940  1.206345  1.359619   \n",
       "2018-01-04      2944.65993    2592.864045   6.5031  1.201043  1.351132   \n",
       "2018-01-05      2944.65993    2592.864045   6.4933  1.206884  1.355289   \n",
       "2018-01-08      2944.65993    2592.864045   6.4875  1.203746  1.357589   \n",
       "2018-01-09      2944.65993    2592.864045   6.4976  1.197046  1.357128   \n",
       "\n",
       "               USD/CNY  US 10Y Yield  US 2Y Yield  Germany 10Y Yield  \\\n",
       "Date                                                                   \n",
       "2018-01-03  112.244003  12978.209961        1.370              2.447   \n",
       "2018-01-04  112.607002  13167.889648        1.370              2.453   \n",
       "2018-01-05  112.782997  13319.639648        1.370              2.476   \n",
       "2018-01-08  113.153999  13367.780273        1.380              2.480   \n",
       "2018-01-09  113.140999  13385.589844        1.415              2.546   \n",
       "\n",
       "                        Class  \n",
       "Date                           \n",
       "2018-01-03    Strong Positive  \n",
       "2018-01-04  Slightly Positive  \n",
       "2018-01-05    Strong Positive  \n",
       "2018-01-08  Slightly Positive  \n",
       "2018-01-09  Slightly Positive  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 🔹 Vérification des valeurs manquantes avant correction\n",
    "print(\"Nombre de NaN AVANT correction :\")\n",
    "print(\"Train :\", train_data.isna().sum().sum(), \"| Test :\", test_data.isna().sum().sum())\n",
    "\n",
    "# 🔹 Remplissage des valeurs manquantes avec la dernière valeur connue (Forward Fill)\n",
    "train_data = train_data.fillna(method=\"ffill\")\n",
    "test_data = test_data.fillna(method=\"ffill\")\n",
    "\n",
    "# 🔹 Vérification après correction\n",
    "print(\"Nombre de NaN APRÈS correction :\", train_data.isna().sum().sum(), \"| Test :\", test_data.isna().sum().sum())\n",
    "\n",
    "# 🔹 Vérification finale : Si des NaN restent, applique un \"backward fill\" pour combler les dernières valeurs manquantes\n",
    "if train_data.isna().sum().sum() > 0 or test_data.isna().sum().sum() > 0:\n",
    "    train_data = train_data.fillna(method=\"bfill\")\n",
    "    test_data = test_data.fillna(method=\"bfill\")\n",
    "    print(\"Correction supplémentaire avec backward fill appliquée.\")\n",
    "\n",
    "# 🔹 Définition des classes de rendement du S&P500\n",
    "train_data[\"Returns\"] = train_data[\"S&P500\"].pct_change()\n",
    "test_data[\"Returns\"] = test_data[\"S&P500\"].pct_change()\n",
    "\n",
    "# 🔹 Suppression des premières lignes NaN après `pct_change()`\n",
    "train_data = train_data.dropna(subset=[\"Returns\"])\n",
    "test_data = test_data.dropna(subset=[\"Returns\"])\n",
    "\n",
    "# 🔹 Définition de la fonction pour classifier les rendements manuellement\n",
    "def classify_returns(r):\n",
    "    if r < -0.005:  # -0.5%\n",
    "        return \"Strong Negative\"\n",
    "    elif -0.005 <= r < 0:  # Entre -0.5% et 0%\n",
    "        return \"Slightly Negative\"\n",
    "    elif 0 <= r < 0.005:  # Entre 0% et +0.5%\n",
    "        return \"Slightly Positive\"\n",
    "    else:  # ≥ +0.5%\n",
    "        return \"Strong Positive\"\n",
    "\n",
    "# 🔹 Application de la classification aux données\n",
    "train_data[\"Class\"] = train_data[\"Returns\"].apply(classify_returns)\n",
    "test_data[\"Class\"] = test_data[\"Returns\"].apply(classify_returns)\n",
    "\n",
    "# 🔹 Vérification de la répartition des classes\n",
    "print(\"Répartition des classes dans Train :\")\n",
    "print(train_data[\"Class\"].value_counts())\n",
    "\n",
    "print(\"\\nRépartition des classes dans Test :\")\n",
    "print(test_data[\"Class\"].value_counts())\n",
    "\n",
    "\n",
    "# 🔹 Suppression de la colonne \"Returns\" après classification\n",
    "train_data = train_data.drop(columns=[\"Returns\"])\n",
    "test_data = test_data.drop(columns=[\"Returns\"])\n",
    "\n",
    "# 🔹 Sauvegarde des datasets\n",
    "train_data.to_csv(\"train_dataset_2019_2023.csv\")\n",
    "test_data.to_csv(\"test_dataset_2023_2024.csv\")\n",
    "\n",
    "print(\"\\n✅ Train et Test datasets prêts et sauvegardés !\")\n",
    "print(f\"Train : {len(train_data)} observations | Test : {len(test_data)} observations\")\n",
    "\n",
    "# 🔹 Affichage des premières lignes\n",
    "train_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Class</th>\n",
       "      <th>Train Observations</th>\n",
       "      <th>Test Observations</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Strong Positive</td>\n",
       "      <td>447</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Slightly Positive</td>\n",
       "      <td>381</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Strong Negative</td>\n",
       "      <td>368</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Slightly Negative</td>\n",
       "      <td>305</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Class  Train Observations  Test Observations\n",
       "0    Strong Positive                 447                 75\n",
       "1  Slightly Positive                 381                 80\n",
       "2    Strong Negative                 368                 46\n",
       "3  Slightly Negative                 305                 58"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               Class  Train Observations  Test Observations\n",
      "0    Strong Positive                 447                 75\n",
      "1  Slightly Positive                 381                 80\n",
      "2    Strong Negative                 368                 46\n",
      "3  Slightly Negative                 305                 58\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 🔹 Calcul de la répartition des classes dans Train et Test\n",
    "train_class_counts = train_data[\"Class\"].value_counts().reset_index()\n",
    "test_class_counts = test_data[\"Class\"].value_counts().reset_index()\n",
    "\n",
    "# 🔹 Renommer les colonnes pour plus de clarté\n",
    "train_class_counts.columns = ['Class', 'Train Observations']\n",
    "test_class_counts.columns = ['Class', 'Test Observations']\n",
    "\n",
    "# 🔹 Fusionner les DataFrames pour avoir une vue d'ensemble\n",
    "class_distribution = pd.merge(train_class_counts, test_class_counts, on='Class')\n",
    "\n",
    "# 🔹 Affichage du tableau des classes avec pandas\n",
    "display(class_distribution)\n",
    "\n",
    "# 🔹 Affichage du tableau\n",
    "print(class_distribution)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NaN restants dans Train : 0\n",
      "NaN restants dans Test : 0\n"
     ]
    }
   ],
   "source": [
    "print(\"NaN restants dans Train :\", train_data.isna().sum().sum())\n",
    "print(\"NaN restants dans Test :\", test_data.isna().sum().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On va désormais implémenter le modèle random forest et comparer l'accuracy et l'importance des features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔹 Nombre de features avant sélection : 22\n",
      "✅ Nombre de features après sélection : 22\n",
      "🔹 Nouvelle taille de X_train : (1501, 22)\n",
      "🔹 Nouvelle taille de X_test : (259, 22)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 🔹 Séparation des features (X) et des labels (y)\n",
    "X_train = train_data.drop(columns=[\"Class\"])\n",
    "y_train = train_data[\"Class\"]\n",
    "\n",
    "X_test = test_data.drop(columns=[\"Class\"])\n",
    "y_test = test_data[\"Class\"]\n",
    "\n",
    "# 🔹 Entraînement du modèle Random Forest\n",
    "rf = RandomForestClassifier(n_estimators=50, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# 🔹 Récupération de l'importance des features\n",
    "feature_importances = rf.feature_importances_\n",
    "\n",
    "# 🔹 Tri des features par importance\n",
    "features_sorted = np.argsort(feature_importances)[::-1]\n",
    "sorted_features = X_train.columns[features_sorted]\n",
    "sorted_importance = feature_importances[features_sorted]\n",
    "\n",
    "# 🔹 Affichage des 20 features les plus importantes\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(sorted_features[:20], sorted_importance[:20], color=\"royalblue\")\n",
    "plt.xlabel(\"Importance\")\n",
    "plt.ylabel(\"Features\")\n",
    "plt.title(\"Top 20 Features Importantes selon Random Forest\")\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()\n",
    "\n",
    "# 🔹 Suppression des features les moins pertinentes (Optionnel)\n",
    "threshold = 0.01  # On garde les features avec une importance > 1%\n",
    "selected_features = sorted_features[sorted_importance > threshold]\n",
    "\n",
    "print(f\"🔹 Nombre de features avant sélection : {X_train.shape[1]}\")\n",
    "print(f\"✅ Nombre de features après sélection : {len(selected_features)}\")\n",
    "\n",
    "# Création d'un nouveau dataset avec uniquement les meilleures features\n",
    "X_train_selected = X_train[selected_features]\n",
    "X_test_selected = X_test[selected_features]\n",
    "\n",
    "# Vérification de la nouvelle taille du dataset\n",
    "print(f\"🔹 Nouvelle taille de X_train : {X_train_selected.shape}\")\n",
    "print(f\"🔹 Nouvelle taille de X_test : {X_test_selected.shape}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_features_names=list(sorted_features)[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Bollinger_High',\n",
       " 'Bollinger_Low',\n",
       " 'US 2Y Yield',\n",
       " 'US 10Y Yield',\n",
       " 'Vanguard Total World Stock ETF',\n",
       " 'DAX',\n",
       " 'STOXX50',\n",
       " 'S&P500',\n",
       " 'Germany 10Y Yield',\n",
       " 'EUR/USD',\n",
       " 'GBP/USD',\n",
       " 'USD/CNY',\n",
       " 'FTSE100',\n",
       " 'Russell 2000',\n",
       " 'Nikkei225',\n",
       " 'USD/JPY',\n",
       " 'iShares MSCI Emerging Markets',\n",
       " 'Hang Seng',\n",
       " 'MACD_Signal',\n",
       " 'MACD',\n",
       " 'RSI',\n",
       " 'VIX Index']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted_features_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🟢 Feature supprimée: Bollinger_High | Nouvelle Accuracy: 0.3977\n",
      "🟢 Feature supprimée: Bollinger_Low | Nouvelle Accuracy: 0.3900\n",
      "🟢 Feature supprimée: US 2Y Yield | Nouvelle Accuracy: 0.3861\n",
      "🟢 Feature supprimée: US 10Y Yield | Nouvelle Accuracy: 0.3900\n",
      "🟢 Feature supprimée: Vanguard Total World Stock ETF | Nouvelle Accuracy: 0.3977\n",
      "🟢 Feature supprimée: DAX | Nouvelle Accuracy: 0.4363\n",
      "🟢 Feature supprimée: STOXX50 | Nouvelle Accuracy: 0.4208\n",
      "🟢 Feature supprimée: S&P500 | Nouvelle Accuracy: 0.3900\n",
      "🟢 Feature supprimée: Germany 10Y Yield | Nouvelle Accuracy: 0.4131\n",
      "🟢 Feature supprimée: EUR/USD | Nouvelle Accuracy: 0.4015\n",
      "🟢 Feature supprimée: GBP/USD | Nouvelle Accuracy: 0.3784\n",
      "🟢 Feature supprimée: USD/CNY | Nouvelle Accuracy: 0.3900\n",
      "🟢 Feature supprimée: FTSE100 | Nouvelle Accuracy: 0.4054\n",
      "🟢 Feature supprimée: Russell 2000 | Nouvelle Accuracy: 0.4054\n",
      "🟢 Feature supprimée: Nikkei225 | Nouvelle Accuracy: 0.4170\n",
      "🟢 Feature supprimée: USD/JPY | Nouvelle Accuracy: 0.3822\n",
      "🟢 Feature supprimée: iShares MSCI Emerging Markets | Nouvelle Accuracy: 0.4054\n",
      "🟢 Feature supprimée: Hang Seng | Nouvelle Accuracy: 0.4131\n",
      "🟢 Feature supprimée: MACD_Signal | Nouvelle Accuracy: 0.4363\n",
      "🟢 Feature supprimée: MACD | Nouvelle Accuracy: 0.3784\n",
      "🟢 Feature supprimée: RSI | Nouvelle Accuracy: 0.3243\n",
      "🚨 Erreur : toutes les features ont été supprimées avant d'atteindre l'itération 22.\n",
      "\n",
      "✅ Meilleure accuracy obtenue : 0.4363\n",
      "Meilleur modèle avec 16 features.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "\n",
    "# 🔹 Initialisation\n",
    "best_accuracy = 0  # Initialiser la meilleure accuracy\n",
    "best_model = None  # Initialiser le modèle avec la meilleure accuracy\n",
    "best_features = X_train.columns  # Liste des features avec la meilleure accuracy\n",
    "\n",
    "# 🔹 Entraînement initial avec toutes les features\n",
    "rf = RandomForestClassifier(n_estimators=50, criterion=\"gini\", min_samples_leaf=10, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# 🔹 Calcul de l'accuracy initiale\n",
    "y_pred_initial = rf.predict(X_test)\n",
    "initial_accuracy = accuracy_score(y_test, y_pred_initial)\n",
    "\n",
    "# 🔹 Mise à jour de la meilleure accuracy et du meilleur modèle\n",
    "best_accuracy = initial_accuracy\n",
    "best_model = rf\n",
    "best_features = X_train.columns\n",
    "\n",
    "# 🔹 Liste pour suivre l'impact de chaque suppression\n",
    "accuracies = [initial_accuracy]\n",
    "\n",
    "# 🔹 Suppression progressive des features\n",
    "X_train_progressive = X_train.copy()\n",
    "X_test_progressive = X_test.copy()\n",
    "\n",
    "for i in range(len(sorted_features)):\n",
    "    feature_to_remove = sorted_features_names[i]\n",
    "    \n",
    "    # 🔹 Supprimer la feature\n",
    "    X_train_progressive = X_train_progressive.drop(columns=[feature_to_remove])\n",
    "    X_test_progressive = X_test_progressive.drop(columns=[feature_to_remove])\n",
    "\n",
    "    # 🔹 Vérification que X_train_progressive et X_test_progressive ne sont pas vides\n",
    "    if X_train_progressive.shape[1] == 0 or X_test_progressive.shape[1] == 0:\n",
    "        print(f\"🚨 Erreur : toutes les features ont été supprimées avant d'atteindre l'itération {i+1}.\")\n",
    "        break\n",
    "    \n",
    "    # 🔹 Entraînement du modèle avec les features restantes\n",
    "    rf.fit(X_train_progressive, y_train)\n",
    "    \n",
    "    # 🔹 Prédictions sur les données de test\n",
    "    y_pred_progressive = rf.predict(X_test_progressive)\n",
    "    \n",
    "    # 🔹 Calcul de l'accuracy après suppression\n",
    "    accuracy = accuracy_score(y_test, y_pred_progressive)\n",
    "    accuracies.append(accuracy)\n",
    "\n",
    "    # 🔹 Mise à jour du meilleur modèle si l'accuracy s'améliore\n",
    "    if accuracy > best_accuracy:\n",
    "        best_accuracy = accuracy\n",
    "        best_model = rf\n",
    "        best_features = X_train_progressive.columns\n",
    "\n",
    "    print(f\"🟢 Feature supprimée: {feature_to_remove} | Nouvelle Accuracy: {accuracy:.4f}\")\n",
    "\n",
    "# 🔹 Affichage de la meilleure accuracy et du meilleur modèle\n",
    "print(f\"\\n✅ Meilleure accuracy obtenue : {best_accuracy:.4f}\")\n",
    "print(f\"Meilleur modèle avec {len(best_features)} features.\")\n",
    "\n",
    "# 🔹 Affichage des résultats finaux\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(range(len(accuracies)), accuracies, marker='o', linestyle='-', color='b')\n",
    "plt.title(\"Impact de la suppression des features sur l'accuracy\")\n",
    "plt.xlabel(\"Nombre de Features Restantes\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 🔹 Fonction pour convertir les rendements continus en classes discrètes\n",
    "def convert_to_classes(r):\n",
    "    if r < -0.005:  # -0.5%\n",
    "        return 0  # \"Strong Negative\"\n",
    "    elif -0.005 <= r < 0:  # Entre -0.5% et 0%\n",
    "        return 1  # \"Slightly Negative\"\n",
    "    elif 0 <= r < 0.005:  # Entre 0% et +0.5%\n",
    "        return 2  # \"Slightly Positive\"\n",
    "    else:  # ≥ +0.5%\n",
    "        return 3  # \"Strong Positive\"\n",
    "\n",
    "# 🔹 Appliquer la conversion des rendements sur X_train_ctw et X_test_ctw\n",
    "train_classes = X_train[\"S&P500\"].pct_change().apply(convert_to_classes)\n",
    "test_classes = X_test[\"S&P500\"].pct_change().apply(convert_to_classes)\n",
    "\n",
    "# 🔹 Mise à jour des labels pour CTW\n",
    "y_train_ctw = train_classes\n",
    "y_test_ctw = test_classes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list=train_classes.values.tolist()\n",
    "L= [int(x) for x in my_list]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy CTW (depth=1) with no side sequence: 0.2984\n",
      "Accuracy CTW (depth=2) with no side sequence: 0.2879\n",
      "Accuracy CTW (depth=3) with no side sequence: 0.2891\n",
      "Accuracy CTW (depth=4) with no side sequence: 0.2863\n",
      "Accuracy CTW (depth=5) with no side sequence: 0.2953\n",
      "Accuracy CTW (depth=6) with no side sequence: 0.3478\n",
      "Accuracy CTW (depth=7) with no side sequence: 0.3532\n",
      "Accuracy CTW (depth=8) with no side sequence: 0.3506\n",
      "Accuracy CTW (depth=9) with no side sequence: 0.3520\n",
      "Accuracy CTW (depth=10) with no side sequence: 0.3574\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "depth_max=10\n",
    "L=[]\n",
    "for depth in range(1,depth_max+1):\n",
    "    ctw_model = CTW(depth=depth, symbols=4)\n",
    "    \n",
    "    ctw_model.predict_sequence(seq=train_classes.values.tolist(),sideseq=None)\n",
    "    \n",
    "    distributions = ctw_model.predict_sequence(test_classes.values.tolist())\n",
    "    y_pred_ctw=np.argmax(distributions, axis=0)\n",
    "    \n",
    "    ctw_accuracy = accuracy_score(test_classes.values.tolist()[depth:], y_pred_ctw)\n",
    "    print(f\"Accuracy CTW (depth={depth}) with no side sequence: {ctw_accuracy:.4f}\")\n",
    "    L.append(ctw_accuracy)\n",
    "    plt.plot(L)\n",
    "plt.xlabel(\"Depth\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"CTW with Different Depths\")\n",
    "plt.show(block=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "\n",
    "# === 1. Fonction d'encodage personnalisée ===\n",
    "def convert_to_classes(r):\n",
    "    if r < -0.005:\n",
    "        return 0  # Strong Negative\n",
    "    elif -0.005 <= r < 0:\n",
    "        return 1  # Slightly Negative\n",
    "    elif 0 <= r < 0.005:\n",
    "        return 2  # Slightly Positive\n",
    "    else:\n",
    "        return 3  # Strong Positive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  2 of 2 completed\n"
     ]
    }
   ],
   "source": [
    "start_date = \"2015-01-01\"\n",
    "end_date = \"2024-12-31\"\n",
    "\n",
    "df = yf.download(['^GSPC', '^VIX'], start=start_date, end=end_date)['Close']\n",
    "df.columns = ['SP500', 'VIX']\n",
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Encodage du SP500 et du VIX\n",
    "sp500_returns = df['SP500'].pct_change().fillna(0)\n",
    "vix_returns = df['VIX'].pct_change().fillna(0)\n",
    "\n",
    "seq = sp500_returns.apply(convert_to_classes).tolist()\n",
    "sideseq = vix_returns.apply(convert_to_classes).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Alignement des séquences\n",
    "min_len = min(len(seq), len(sideseq))\n",
    "seq = seq[:min_len]\n",
    "sideseq = sideseq[:min_len]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/5 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5/5 [00:16<00:00,  3.27s/it]\n"
     ]
    }
   ],
   "source": [
    "#Évaluation de l'accuracy selon la profondeur\n",
    "accuracies = []\n",
    "depths = list(range(1, 6))  # profondeur de 1 à 5\n",
    "\n",
    "for d in tqdm(depths):\n",
    "    ctw = CTW(depth=d, symbols=4, sidesymbols=4) \n",
    "    dist = ctw.predict_sequence(seq, sideseq=sideseq)\n",
    "    \n",
    "    preds = np.argmax(dist, axis=0)\n",
    "    true_labels = np.array(seq[d:])\n",
    "    \n",
    "    acc = np.mean(preds == true_labels)\n",
    "    accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(depths, accuracies, marker='o')\n",
    "plt.title(\"Accuracy prédictive CTW selon la profondeur\\nSP500 (classe 4) + VIX side-info (classe 4)\")\n",
    "plt.xlabel(\"Profondeur de l’arbre (D)\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
